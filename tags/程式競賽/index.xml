<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>程式競賽 on Yuto's notes</title><link>https://example.org/tags/%E7%A8%8B%E5%BC%8F%E7%AB%B6%E8%B3%BD/</link><description>Recent content in 程式競賽 on Yuto's notes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2023 © [Yuto](https://joeroe.io)</copyright><lastBuildDate>Fri, 18 Nov 2022 20:57:16 +0000</lastBuildDate><atom:link href="https://example.org/tags/%E7%A8%8B%E5%BC%8F%E7%AB%B6%E8%B3%BD/index.xml" rel="self" type="application/rss+xml"/><item><title>0.教材說明與預備知識</title><link>https://example.org/posts/csie/ap325/0/</link><pubDate>Fri, 18 Nov 2022 20:57:16 +0000</pubDate><guid>https://example.org/posts/csie/ap325/0/</guid><description>0.2.1 基本C++模板與輸入輸出 #include &amp;lt;bits/stdc++.h&amp;gt; // 萬用標頭檔 using namespace std; int main(){ ios::sync_with_stdio(0); // 優化cin的東西 cin.tie(0); // code here return 0; } 有優化cin的那兩行就不能再把cin/cout與scanf/printf混用，不然會發生無法預測的錯誤
使用scanf/printf 使用cin/cout並優化 0.2.2 程式測試與測試資料 stdin: 標準輸入裝置，預設鍵盤 stdout: 標準輸出裝置，預設螢幕 stderr: 標準錯誤紀錄裝置，預設螢幕 unix環境下的IO重導:
./a.out &amp;lt;test.in &amp;gt;test.out 程式裡面I/O重導:
freopen(&amp;#34;test.in&amp;#34;,&amp;#34;r&amp;#34;,stdin); freopen(&amp;#34;test.out&amp;#34;,&amp;#34;w&amp;#34;,stdout); unix環境下計時:
time a.out &amp;lt;test.in 程式裡面計時:
#include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; int main(){ clock_t start,end; start=clock(); // code here end=clock(); fprint(stderr,&amp;#34;time from start to end = %f sec.\n&amp;#34;,(float)(end-start)/CLOCKS_PER_SEC); return 0; } 0.2.3 複雜度估算 複雜度估算方式 時間複雜度通常以$O(f(n))$來表示，念作big-O，以n來表示資料量，常數倍通常忽略不計 常見的有:$O(n)$、$O(nlog(n))$、$(n^2)$</description></item></channel></rss>