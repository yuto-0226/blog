<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>類神經網路 on Yuto's notes</title><link>https://example.org/tags/%E9%A1%9E%E7%A5%9E%E7%B6%93%E7%B6%B2%E8%B7%AF/</link><description>Recent content in 類神經網路 on Yuto's notes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2023 © [Yuto](https://joeroe.io)</copyright><lastBuildDate>Thu, 12 May 2022 14:20:28 +0000</lastBuildDate><atom:link href="https://example.org/tags/%E9%A1%9E%E7%A5%9E%E7%B6%93%E7%B6%B2%E8%B7%AF/index.xml" rel="self" type="application/rss+xml"/><item><title>[C++]感知機 PLA</title><link>https://example.org/posts/csie/dsa/perceptron/</link><pubDate>Thu, 12 May 2022 14:20:28 +0000</pubDate><guid>https://example.org/posts/csie/dsa/perceptron/</guid><description>感知機 PLA 針對線性資料的分類 訓練後 函式&amp;amp;變數 dot()，將兩向量(double)內積並回傳其值(double)。 double dot(std::vector&amp;lt;double&amp;gt; vec_1, std::vector&amp;lt;double&amp;gt; vec_2); vec_to_str()，將向量轉換成 string 並回傳。 std::string vec_to_str(std::vector&amp;lt;double&amp;gt; vec); intput_data()，輸入一組資料(輸入向量&amp;amp;類型) train_data intput_data(int dimension); class train_data class train_data{ private: std::vector&amp;lt;double&amp;gt; inputs; bool is_type; public: train_data(std::vector&amp;lt;double&amp;gt; inputs, bool is_type); std::vector&amp;lt;double&amp;gt; get_intputs(); bool get_type(); std::string to_str(); }; private 輸入層向量。 std::vector&amp;lt;double&amp;gt; inputs; 類型。 bool is_type; public 建構元，直接初始化輸入向量和類型。 train_data(std::vector&amp;lt;double&amp;gt; inputs, bool is_type); get_intputs()，回傳輸入層向量。 std::vector&amp;lt;double&amp;gt; get_intputs(); get_type()，回傳類型。 bool get_type(); to_str()，將 train_data 物件的輸入向量、類型轉換成字串回傳。 std::string to_str(); class perceptron class perceptron{ private: std::vector&amp;lt;train_data&amp;gt; data; std::vector&amp;lt;double&amp;gt; weights; double bias; double learning_rate; void init_weights(); void init_bias(); double cost(train_data data); void update(train_data data); void train_epoch(); public: perceptron(std::vector&amp;lt;train_data&amp;gt; data, double learning_rate); bool predict_type(train_data data); void train(int epochs,bool reset); std::string to_str(); }; private data，訓練資料陣列。 std::vector&amp;lt;train_data&amp;gt; data; weights，權重向量。 std::vector&amp;lt;double&amp;gt; weights; bias，偏置值(閥值)。 double bias; learning_rate，學習率。 double learning_rate; init_weights()，初始化權重向量。 void init_weights(); init_bias，初始化偏置值。 void init_bias(); cost()，回傳 cost double cost(train_data data); update()，更新權重。 void update(train_data data); train_epoch()，訓練完一組資料。 void train_epoch(); public 建構元，設定輸入向量陣列、學習率。 perceptron(std::vector&amp;lt;train_data&amp;gt; data, double learning_rate); predict_type()，感知姬預測的類型 bool predict_type(train_data data); train()，訓練感知機。 void train(int epochs,bool reset); to_str()，把權重、偏置值及學習率轉換成字串後回傳。 std::string to_str(); 預設資料集 int main(){ std::vector&amp;lt;train_data&amp;gt; data; int n_data=20; int n_dimension=0; double learning_rate=0; double n_correct=0; int n_epoch=0; clock_t start,end; for(size_t i=0;i&amp;lt;n_data;i++){ data.</description></item></channel></rss>