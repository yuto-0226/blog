<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linked List on Yuto's notes</title><link>https://example.org/tags/linked-list/</link><description>Recent content in Linked List on Yuto's notes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2023 © [Yuto](https://joeroe.io)</copyright><lastBuildDate>Sat, 01 Jan 2022 21:00:11 +0000</lastBuildDate><atom:link href="https://example.org/tags/linked-list/index.xml" rel="self" type="application/rss+xml"/><item><title>[C++]鏈接串列 Linked List</title><link>https://example.org/posts/csie/dsa/cpp-linkedlist/</link><pubDate>Sat, 01 Jan 2022 21:00:11 +0000</pubDate><guid>https://example.org/posts/csie/dsa/cpp-linkedlist/</guid><description>簡介 何謂鏈接串列(Linked List)?串列是一種常見的資料結構， 使用節點儲存資料，且透過接點的指標指向下一個節點， 形成一串記憶體位置不相連的資料串。
Linked List vs Array Array Pros
random access：只要利用index即可在O(1)時間對Array的資料做存取。 較Linked list為節省記憶體空間：因為Linked list需要多一個pointer來記錄下一個節點的記憶體位置。 Cons
新增/刪除資料很麻煩：若要在第一個位置新增資料，就需要O(N)時間把矩陣中所有元素往後移動。同理，若要刪除第一個位置的資料，也需要O(N)時間把矩陣中剩餘的元素往前移動。 若資料數量時常在改變，要時常調整矩陣的大小，會花費O(N)的時間在搬動資料(把資料從舊的矩陣移動到新的矩陣)。 適用時機
希望能夠快速存取資料。 已知欲處理的資料數量，便能確認矩陣的大小。 要求記憶體空間的使用越少越好。 Linked List Pros
新增/刪除資料較Array簡單，只要對O(1)個節點調整pointer即可，不需要如同Array般搬動其餘元素。 Linked list的資料數量可以是動態的，不像Array會有resize的問題。 Cons
因為Linked list沒有index，若要找到特定節點，需要從頭(Node *first)開始找起，搜尋的時間複雜度為O(N)。 需要額外的記憶體空間來儲存pointer。 適用時機
無法預期資料數量時，使用Linked list就沒有resize的問題。 需要頻繁地新增/刪除資料時。 不需要快速查詢資料。 用 class 實作 #include &amp;lt;bits/stdc++.h&amp;gt; using std::cout; using std::endl; class Linkedlist; class Node{ private: int data; Node *next; public: Node():data(0),next(0){}; Node(int x):data(x),next(0){}; friend class LinkedList; }; class LinkedList{ private: Node *first; public: LinkedList():first(0){}; void printlist(); void push_front(int x); void push_back(int x); void erase(int x); void clear(); void reverse(); }; void LinkedList::printlist(){ if(first==0){ cout&amp;lt;&amp;lt;&amp;#34;List is empty.</description></item></channel></rss>